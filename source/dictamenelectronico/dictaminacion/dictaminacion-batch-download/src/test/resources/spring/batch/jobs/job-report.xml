<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <bean id="report" class="com.mkyong.model.Report" scope="prototype" />
    <bean id="customWriter" class="com.mkyong.writers.CustomWriter" />
	<batch:job id="reportJob">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" writer="itemWriter"
					commit-interval="20">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/report.csv" />
		
		<property name="linesToSkip" value="1"/>

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="cveIdPais,siglas,desPais,desNacionalidad" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				
					<bean class="com.mkyong.mappers.ReportFieldSetMapper" />
				    
				    <!-- return back to reader, rather than a mapped object. -->
				    <!--
				    	<bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
				    -->
				      
					<!-- map to an object -->
<!-- 					<bean -->
<!-- 						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"> -->
<!-- 						<property name="prototypeBeanName" value="report" /> -->
<!-- 					</bean> -->
					
				</property>

			</bean>
		</property>

	</bean>

<bean id="itemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
    <property name="resource" value="file:cvs/output.txt" />
    <property name="lineAggregator">
		<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
            <property name="delimiter" value=","/>
            <property name="fieldExtractor">
                <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                    <property name="names" value="cveIdPais,siglas,desPais,desNacionalidad" />
                </bean>
            </property>
        </bean>    
	</property>
</bean>


	<bean id="mysqlItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into DIC_PAIS(CVE_ID_PAIS,SIGLAS,DES_PAIS,DES_NACIONALIDAD) values (:cveIdPais, :siglas, :desPais, :desNacionalidad)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

</beans>
