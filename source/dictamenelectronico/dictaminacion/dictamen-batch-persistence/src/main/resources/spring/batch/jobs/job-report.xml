<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/task
    	http://www.springframework.org/schema/task/spring-task-3.2.xsd
    	http://www.springframework.org/schema/util
    	http://www.springframework.org/schema/util/spring-util-2.5.xsd">
    	
    <context:component-scan base-package="mx.gob.imss.cit.dictamen.batch.persistence.scheduler" />
    	
    <bean id="txtFile" class="mx.gob.imss.cit.dictamen.batch.persistence.to.TxtFileTO" scope="prototype" />
    <bean id="a1" class="mx.gob.imss.cit.dictamen.batch.persistence.to.A1TO" scope="prototype" />
    <bean id="itemProcessor" class="mx.gob.imss.cit.dictamen.batch.persistence.processors.TxtFileProcessor" />
    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@172.16.8.166:1630:bdtu2" />
		<property name="username" value="MGPNDIC1" />
		<property name="password" value="MGPnd1cI" />
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>		
	</bean>
		
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="dataSource" ref="dataSource" />
		<property name="databaseType" value="oracle" />
		<property name="isolationLevelForCreate" value="ISOLATION_READ_COMMITTED "/>
	</bean>
 
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
     
	<batch:job id="reportJob">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" writer="oracleItemWriter" processor="itemProcessor"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	 <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">	
		<!-- Read a csv file -->
		<property name="resource" value="file:#{jobParameters[origen]}" />	
		<property name="linesToSkip" value="1"/>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">				
				<property name="lineTokenizer">
		        	<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		        		<property name="delimiter">
    						<util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_TAB"/>
						</property>
						<property name="strict" value="false"/>
						<property name="names" value="#{jobParameters[fields]}" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="#{jobParameters[prototype]}" />
					</bean>
				</property>	
			</bean>
		</property>	
	</bean>
	
	<bean id="itemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
	    <property name="resource" value="file:#{jobParameters[destino]}" />
	    <property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
	            <property name="fieldExtractor">
	                <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
	                    <property name="names" value="#{jobParameters[fields]}" />
	                </bean>
	            </property>
            </bean>
		</property>
	</bean>
	
	<bean id="oracleItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[
            	INSERT INTO NDT_A1_PERCEP_TRABAJADOR
            		(
					CVE_ID_A1_PERCEPTRAB,
					CVE_ID_PATRON_DICTAMEN,
					REG_PATRONAL,
					NOM_PRIMER_APELLIDO_TRABAJADOR,
					NOM_SEGUNDO_AELLIDO_TRABAJADOR,
					NOM_NOMBRE_TRABAJADOR,
					NUM_NSS_TRABAJADOR,
					RFC_TRABAJADOR,
					CURP_TRABAJADOR,
					IMP_SUELDOS_SALARIOS,
					IMP_GRATIFICACIONES,
					IMP_VIATICOS,
					IMP_TIEMPO_EXTRA,
					IMP_PRIMA_VACACIONAL,
					IMP_PRIMA_DOMINICAL,
					IMP_PTU,
					IMP_REEMBOLSO_GM,
					IMP_FONDO_AHORRO,
					IMP_CAJA_AHORRO,
					IMP_VALES_DESPENSA,
					IMP_AYUDA_GF,
					IMP_CONTRIBUCION_PATRON,
					IMP_PREMIO_PUNTUALIDAD,
					IMP_PREMIO_ASISTENCIA,
					IMP_PRIMA_SEGURO_VIDA,
					IMP_SEGURO_GMM,
					IMP_VALES_RESTAURANT,
					IMP_VALES_GASOLINA,
					IMP_VALES_ROPA,
					IMP_AYUDA_RENTA,
					IMP_AYUDA_ESCOLAR,
					IMP_AYUDA_ANTEOJOS,
					IMP_AYUDA_TRANSPORTE,
					IMP_CUOTA_SINDICAL,
					IMP_SUBSIDIO_INCAPACIDAD,
					IMP_BECA_TRABAJADOR_HIJO,
					IMP_OTROS_INGRESOS_XSALARIO,
					IMP_PAGO_OTRO_EMPLEADOR,
					IMP_JUB_PEN_RETIRO,
					IMP_OTROS_PAGOS_XSEPARACION,
					IMP_TOTAL,
					CVE_ID_USUARIO,
					FEC_REGISTRO_ALTA,
					FEC_REGISTRO_BAJA,
					FEC_REGISTRO_ACTUALIZADO,
					CVE_ID_PATRON_ASOCIADO
			        )
			        VALUES
			        (
			        :cveIdA1PercepTrab,
					:cveIdPatronDictamen,
					:regPatronal,
					:nomPrimerApellidoTrabajador,
					:nomSegundoApellidoTrabajador,
					:nomNombreTrabajador,
					:numNssTrabajador,
					:rfcTrabajador,
					:curpTrabajador,
					:impSueldosSalarios,
					:impGratificaciones,
					:impViaticos,
					:impTiempoExtra,
					:impPrimaVacacional,
					:impPrimaDominical,
					:impPtu,
					:impReembolsoGm,
					:impFondoAhorro,
					:impCajaAhorro,
					:impValesDespensa,
					:impAyudaGf,
					:impContribucionPatron,
					:impPremioPuntualidad,
					:impPremioAsistencia,
					:impPrimaSeguroVida,
					:impSeguroGmm,
					:impValesRestaurant,
					:impValesGasolina,
					:impValesRopa,
					:impAyudaRenta,
					:impAyudaEscolar,
					:impAyudaAnteojos,
					:impAyudaTransporte,
					:impCuotaSindical,
					:impSubsidioIncapacidad,
					:impBecaTrabajadorHijo,
					:impOtrosIngresosXsalario,
					:impPagoOtroEmpleador,
					:impJubPenRetiro,
					:impOtrosPagosXseparacion,
					:impTotal,
					:cveIdUsuario,
					:fecRegistroAlta,
					:fecRegistroBaja,
					:fecRegistroActualizado,
					:cveIdPatronAsociado
			        )
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>			
	
  	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>spring/batch/properties/configuration.properties</value>
		</property>
	</bean>	
	
	<bean id="scanScheduler" class="mx.gob.imss.cit.dictamen.batch.persistence.scanner.ScanBucket" >
		<property name="rutaOrigen" value="${aws.ruta.origen}"/>
		<property name="rutaDestino" value="${configuracion.ruta.destino}"/>
		<property name="rutaProcesamiento" value="${aws.ruta.procesamiento}"/>
		<property name="bucketName" value="${aws.bucket}"/>
		<property name="rutaAWSCredentials" value="${aws.ruta.credentials}"/>
		<property name="extension" value="#{'${configuracion.extensiones.permitidas}'.split(',')}"/>
	</bean>

	<task:scheduled-tasks>
		<task:scheduled ref="scanScheduler" method="run" fixed-delay="${configuracion.scheduler.delay}"/>
	</task:scheduled-tasks>

</beans>